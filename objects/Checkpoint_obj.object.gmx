<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Checkpoint_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-350</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 0.5;
image_blend = c_green;
next_wall = noone;
left_anchor = noone;
right_anchor = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_self();
var center_x = x + image_xscale/2*16;
var center_y = y + image_yscale/2*16;
if (instance_exists(next_wall))
{
    draw_set_color(c_red);
    draw_line(center_x, center_y, next_wall.x+8, next_wall.y+8);
}
if (instance_exists(left_anchor))
{
    draw_set_color(c_blue);
    draw_line(center_x, center_y, left_anchor.x+8, left_anchor.y+8);
}
if (instance_exists(right_anchor))
{
    draw_set_color(c_blue);
    draw_line(center_x, center_y, right_anchor.x+8, right_anchor.y+8);
}*/

if (id == ds_list_find_value(CheckpointManager_obj.checkpoints, 0).id)
{
    var is_horizontal = image_xscale &gt; image_yscale;
    
    var x_offset;
    var y_offset;
    var x_incr;
    var y_incr;
    var checkpoint_angle;
    
    if (is_horizontal)
    {
        x_offset = 8;
        y_offset = 8;
        x_incr = 8;
        y_incr = 0;
        checkpoint_angle = 0;
    }
    else
    {
        x_offset = 8;
        y_offset = 8;
        x_incr = 0;
        y_incr = 8;
        checkpoint_angle = 270;
    }
    
    while (instance_position(x + x_offset + x_incr, y + y_offset + y_incr, self))
    {
        draw_sprite_ext(LapCap_spr, 0,
            x+x_offset, y+y_offset,
            1, 1, checkpoint_angle, image_blend, 1);
        x_offset += x_incr;
        y_offset += y_incr;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
