<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Racer_spr</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>accel_speed = 1/10;
max_speed = 16;

braking = false;
charge = 0;

next_checkpoint_index = 0;
lap_num = 0;
next_checkpoint = noone;

space_pressed = false;
space_released = false;

cpu_type = "bronze";
cpu_hit_checkpoint_flag = false;

debug_text = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (next_checkpoint == noone)
{
    next_checkpoint = ds_list_find_value(
        CheckpointManager_obj.checkpoints, next_checkpoint_index);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>get_input();

var wall_collision = place_meeting(x+hspeed, y+vspeed, Wall_obj);

if (wall_collision)
{
    charge = 0;
    braking = false;
    speed = 0;
    change_direction();
}

if (!braking)
{
    if (space_pressed)
    {
        braking = true;
        
        var test_cp = next_checkpoint;
        var test_index = next_checkpoint_index;
        var next_wall = get_next_wall_in_direction(x, y, direction);
        //Step back
        var next_wall_x = next_wall.x + 8 + cos(direction/180*pi + pi)*16;
        var next_wall_y = next_wall.y + 8 - sin(direction/180*pi + pi)*16
        
        if (collision_line(x, y, next_wall_x, next_wall_y, test_cp, true, true))
        {
            test_index += 1;
            if (test_index &gt; ds_list_size(CheckpointManager_obj.checkpoints)-1)
            {
                test_index = 0;
            }
            test_cp = ds_list_find_value(CheckpointManager_obj.checkpoints, test_index);
        }
        
        image_angle = predict_next_dir(next_wall_x, next_wall_y, direction, test_cp);
    }
    else
    {
        speed += accel_speed;
        if (speed &gt; max_speed) { speed = max_speed; }
    }
}

if (braking)
{
    if (!space_released)
    {
        speed -= accel_speed;
        charge += accel_speed;
        if (speed &lt;= 0)
        {
            speed = 0;
            space_released = true;
        }
    }
    
    if (space_released)
    {
        braking = false;
        change_direction();
    }
}

if (is_ghost_active(cpu_type))
{
    visible = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Checkpoint_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.id == next_checkpoint.id)
{
    if (next_checkpoint_index == 0)
    {
        lap_num += 1;
    }
    
    next_checkpoint = noone;
    next_checkpoint_index += 1;
    if (next_checkpoint_index &gt; ds_list_size(CheckpointManager_obj.checkpoints) - 1)
    {
        next_checkpoint_index = 0;
    }
    cpu_hit_checkpoint_flag = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Wall_obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dir_from_other = point_direction(other.x + 8, other.y + 8, x, y);
var dir_from_other_rad = dir_from_other/180*pi;

var x_incr = cos(dir_from_other_rad);
var y_incr = -1 * sin(dir_from_other_rad);

while(place_meeting(x, y, other))
{
    x += x_incr;
    y += y_incr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (cpu_type != "player")
{
    var distance_to_player = point_distance(x, y, Player_obj.x, Player_obj.y);
    var opacity = 0;
    if (distance_to_player &gt;= 32)
    {
        opacity = 0.5;   
    }
    else if (distance_to_player &gt; 16)
    {
        opacity = (distance_to_player-16) / 32;
    }
    image_alpha = opacity;
} 
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
